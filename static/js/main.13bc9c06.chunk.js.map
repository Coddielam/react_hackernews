{"version":3,"sources":["App.js","index.js"],"names":["API_ENDPOINT","storiesReducer","state","action","type","isLoading","isError","data","payload","filter","story","objectID","Error","SearchForm","searchTerm","onSearchInput","onSearchSubmit","onSubmit","className","id","onInputChange","value","isFocused","disabled","List","list","onRemoveItem","map","item","key","Item","style","width","href","url","title","author","num_comments","points","onClick","InputWithLabel","children","inputRef","React","useRef","useEffect","current","focus","htmlFor","ref","onChange","autoFocus","App","initialValue","useState","localStorage","getItem","setValue","setItem","useSemiPersistentState","setSearchTerm","setUrl","useReducer","stories","dispatchStories","handleFetchStories","useCallback","axios","get","then","result","hits","catch","event","target","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAIMA,G,MAAe,+CAuBfC,EAAiB,SAACC,EAAOC,GAC7B,OAAQA,EAAOC,MACb,IAAK,qBACH,OAAO,2BACFF,GADL,IAEEG,WAAW,EACXC,SAAS,IAEb,IAAK,wBACH,OAAO,2BACFJ,GADL,IAEEG,WAAW,EACXC,SAAS,EACTC,KAAMJ,EAAOK,UAEjB,IAAK,wBACH,OAAO,2BACFN,GADL,IAEEG,WAAW,EACXC,SAAS,IAEb,IAAK,eACH,OAAO,2BACFJ,GADL,IAEEK,KAAML,EAAMK,KAAKE,QACf,SAACC,GAAD,OAAWP,EAAOK,QAAQG,WAAaD,EAAMC,cAGnD,QACE,MAAM,IAAIC,QAwEVC,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,cAAeC,EAA9B,EAA8BA,eAA9B,OACjB,0BAAMC,SAAUD,EAAgBE,UAAU,eACxC,kBAAC,EAAD,CACEC,GAAG,SACHC,cAAeL,EACfM,MAAOP,EACPQ,WAAS,GAET,6CAEF,4BACElB,KAAK,SACLmB,UAAWT,EACXI,UAAU,uBAHZ,YAUEM,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAT,OAGXD,EAAKE,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,CAAMC,IAAKD,EAAKjB,SAAUiB,KAAMA,EAAMF,aAAcA,QAIlDI,EAAO,SAAC,GAER,IADFF,EACC,EADDA,KAAMF,EACL,EADKA,aAER,OACE,yBAAKG,IAAKD,EAAKjB,SAAUO,UAAU,QACjC,0BAAMa,MAAO,CAAEC,MAAO,QACpB,uBAAGC,KAAML,EAAKM,KAAMN,EAAKO,OAAW,KAEtC,0BAAMJ,MAAO,CAAEC,MAAO,QAAUJ,EAAKQ,QACrC,0BAAML,MAAO,CAAEC,MAAO,QAAUJ,EAAKS,cACrC,0BAAMN,MAAO,CAAEC,MAAO,QAAUJ,EAAKU,QACrC,0BAAMP,MAAO,CAAEC,MAAO,QACpB,4BACE5B,KAAK,SACLmC,QAAS,kBAAMb,EAAaE,IAC5BV,UAAU,uBAHZ,cAaFsB,EAAiB,SAAC,GAOjB,IANLrB,EAMI,EANJA,GACAE,EAKI,EALJA,MACAD,EAII,EAJJA,cAII,IAHJhB,YAGI,MAHG,OAGH,EAFJqC,EAEI,EAFJA,SACAnB,EACI,EADJA,UAIMoB,EAAWC,IAAMC,SAQvB,OANAD,IAAME,WAAU,WACVvB,GAAaoB,EAASI,SACxBJ,EAASI,QAAQC,UAElB,CAACzB,IAIF,oCACE,2BAAO0B,QAAS7B,EAAID,UAAU,SAC3B,IACAuB,EAAU,KAEb,2BACEQ,IAAKP,EACLtC,KAAMA,EACNe,GAAIA,EACJ+B,SAAU9B,EACVC,MAAOA,EACP8B,UAAW7B,EACXJ,UAAU,UAEZ,4CACgB,gCAASG,MAMhB+B,EAjKH,WAAO,IAAD,EAnDa,SAACvB,EAAKwB,GAAkB,IAAD,EAC1BV,IAAMW,SAC9BC,aAAaC,QAAQ3B,IAAQwB,GAFqB,mBAC7ChC,EAD6C,KACtCoC,EADsC,KAUpD,OAFAd,IAAME,WAAU,kBAAMU,aAAaG,QAAQ7B,EAAKR,KAAQ,CAACA,EAAOQ,IAEzD,CAACR,EAAOoC,GA0CqBE,CAAuB,SAAU,SADrD,mBACT7C,EADS,KACG8C,EADH,OAEMjB,IAAMW,SAAN,UAAkBtD,GAAlB,OAAiCc,IAFvC,mBAEToB,EAFS,KAEJ2B,EAFI,OAImBlB,IAAMmB,WAAW7D,EAAgB,CAClEM,KAAM,GACNF,WAAW,EACXC,SAAS,IAPK,mBAITyD,EAJS,KAIAC,EAJA,KAUVC,EAAqBtB,IAAMuB,aAAY,WAC3CF,EAAgB,CAAE5D,KAAM,uBAExB+D,IACGC,IAAIlC,GACJmC,MAAK,SAACC,GACLN,EAAgB,CACd5D,KAAM,wBACNI,QAAS8D,EAAO/D,KAAKgE,UAGxBC,OAAM,kBAAMR,EAAgB,CAAE5D,KAAM,+BACtC,CAAC8B,IAGJS,IAAME,WAAU,kBAAMoB,MAAsB,CAACA,IAoB7C,OACE,yBAAK/C,UAAU,aACb,wBAAIA,UAAU,oBAAd,qBACA,kBAAC,EAAD,CACEJ,WAAYA,EACZC,cArBoB,SAAC0D,GAAD,OAAWb,EAAca,EAAMC,OAAOrD,QAsB1DL,eAnBqB,SAACyD,GAC1BZ,EAAO,GAAD,OAAI7D,GAAJ,OAAmBc,IACzB2D,EAAME,oBAmBJ,6BAECZ,EAAQzD,SAAW,uDAEnByD,EAAQ1D,UACP,yCAEA,kBAAC,EAAD,CAAMoB,KAAMsC,EAAQxD,KAAMmB,aAtBN,SAACE,GACzBoC,EAAgB,CACd5D,KAAM,eACNI,QAASoB,SCjGfgD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.13bc9c06.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst API_ENDPOINT = \"https://hn.algolia.com/api/v1/search?query=\";\n\n/**\n * for storing last searched story using localStorage object\n * in it there is a state which initialize to the last value from localStorage\n */\nconst useSemiPersistentState = (key, initialValue) => {\n  const [value, setValue] = React.useState(\n    localStorage.getItem(key) || initialValue\n  );\n  // when App renders, it updates the state for value and the key/value pair in localStorage,\n  // this generates a side-effect, so we use useEffect hook to mitigate the state of things outside of the program\n  // like the browser API localStorage\n  // side-effect hooks simply trigger a side-effect, that's all\n  React.useEffect(() => localStorage.setItem(key, value), [value, key]);\n  // returns an array\n  return [value, setValue];\n};\n\n/**\n * useReducer to update App's state based on action's type\n * return new state object\n */\nconst storiesReducer = (state, action) => {\n  switch (action.type) {\n    case \"STORIES_FETCH_INIT\":\n      return {\n        ...state,\n        isLoading: true,\n        isError: false,\n      };\n    case \"STORIES_FETCH_SUCCESS\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case \"STORIES_FETCH_FAILURE\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    case \"REMOVE_STORY\":\n      return {\n        ...state,\n        data: state.data.filter(\n          (story) => action.payload.objectID !== story.objectID\n        ),\n      };\n    default:\n      throw new Error();\n  }\n};\n\n// ************************************************************************\nconst App = () => {\n  const [searchTerm, setSearchTerm] = useSemiPersistentState(\"search\", \"React\");\n  const [url, setUrl] = React.useState(`${API_ENDPOINT}${searchTerm}`);\n\n  const [stories, dispatchStories] = React.useReducer(storiesReducer, {\n    data: [],\n    isLoading: false,\n    isError: false,\n  });\n\n  const handleFetchStories = React.useCallback(() => {\n    dispatchStories({ type: \"STORIES_FETCH_INIT\" });\n\n    axios\n      .get(url)\n      .then((result) => {\n        dispatchStories({\n          type: \"STORIES_FETCH_SUCCESS\",\n          payload: result.data.hits,\n        });\n      })\n      .catch(() => dispatchStories({ type: \"STORIES_FETCH_FAILURE\" }));\n  }, [url]);\n\n  // triggers a side-effect to update things outside the program\n  React.useEffect(() => handleFetchStories(), [handleFetchStories]);\n\n  // event handler for when input field's value changes\n  // updates state of searchTerm\n  const handleSearchInput = (event) => setSearchTerm(event.target.value);\n\n  // submit button handler\n  const handleSearchSubmit = (event) => {\n    setUrl(`${API_ENDPOINT}${searchTerm}`);\n    event.preventDefault();\n  };\n\n  // event handler for when button is clicked\n  const handleRemoveStory = (item) => {\n    dispatchStories({\n      type: \"REMOVE_STORY\",\n      payload: item,\n    });\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"headline-primary\">My Hacker Stories</h1>\n      <SearchForm\n        searchTerm={searchTerm}\n        onSearchInput={handleSearchInput}\n        onSearchSubmit={handleSearchSubmit}\n      />\n      <hr />\n\n      {stories.isError && <p>Something went wrong ...</p>}\n\n      {stories.isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <List list={stories.data} onRemoveItem={handleRemoveStory} />\n      )}\n    </div>\n  );\n};\n\n// ************************************************************************\nconst SearchForm = ({ searchTerm, onSearchInput, onSearchSubmit }) => (\n  <form onSubmit={onSearchSubmit} className=\"search-form\">\n    <InputWithLabel\n      id=\"search\"\n      onInputChange={onSearchInput}\n      value={searchTerm}\n      isFocused\n    >\n      <strong>Search: </strong>\n    </InputWithLabel>\n    <button\n      type=\"submit\"\n      disabled={!searchTerm}\n      className=\"button button_large\"\n    >\n      Submit\n    </button>\n  </form>\n);\n// ************************************************************************\nconst List = ({ list, onRemoveItem }) =>\n  // left: rest operator; right spread operator\n  // RHS: spreading the rest of item\n  list.map((item) => (\n    <Item key={item.objectID} item={item} onRemoveItem={onRemoveItem} />\n  ));\n\n// ************************************************************************\nconst Item = (\n  { item, onRemoveItem } // item has been destructured from props\n) => {\n  return (\n    <div key={item.objectID} className=\"item\">\n      <span style={{ width: \"40%\" }}>\n        <a href={item.url}>{item.title}</a>{\" \"}\n      </span>\n      <span style={{ width: \"30%\" }}>{item.author}</span>\n      <span style={{ width: \"10%\" }}>{item.num_comments}</span>\n      <span style={{ width: \"10%\" }}>{item.points}</span>\n      <span style={{ width: \"10%\" }}>\n        <button\n          type=\"button\"\n          onClick={() => onRemoveItem(item)}\n          className=\"button button_small\"\n        >\n          Dismiss\n        </button>\n      </span>\n    </div>\n  );\n};\n\n// ************************************************************************\nconst InputWithLabel = ({\n  id,\n  value,\n  onInputChange,\n  type = \"text\",\n  children,\n  isFocused,\n}) => {\n  // ** imperatively set input focus state **\n  // instantiate ref object\n  const inputRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isFocused && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isFocused]);\n\n  return (\n    // default input field type is text if not specified via props passed in\n    <>\n      <label htmlFor={id} className=\"label\">\n        {\" \"}\n        {children}{\" \"}\n      </label>\n      <input\n        ref={inputRef}\n        type={type}\n        id={id}\n        onChange={onInputChange}\n        value={value}\n        autoFocus={isFocused}\n        className=\"input\"\n      />\n      <p>\n        Searching for <strong>{value}</strong>\n      </p>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}